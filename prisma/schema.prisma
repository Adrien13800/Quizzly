// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id Int @id @default(autoincrement())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  question Question[]
}

model Party {
  id Int @id @default(autoincrement())
  score Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Question {
  id Int @id @default(autoincrement())
  name String
  image String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  response Response[]
}

model Response {
  id Int @id @default(autoincrement())
  name String
  status Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
}

model Roles {
  id Int @id @default(autoincrement())
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user User[]
}

model User {
  id Int @id @default(autoincrement())
  firstname String
  lastname String
  email String
  password String
  pseudo String
  admin Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  party Party[]
  roles Roles @relation(fields: [rolesId], references: [id])
  rolesId Int
}